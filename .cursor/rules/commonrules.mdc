---
description: 
globs: 
alwaysApply: true
---
FLUTTER DEVELOPMENT RULES:

You must develop new UI elements in flutter_styleguide according to flutter_styleguide/README.md rules

run "flutter test" from flutter_styleguide directory when you're changing flutter code and fix issues before you stop with response.

Create golden tests for all new UI elements and review output image result to be sure that you developed UI elements correctly.


Use "temp" folder for temporary scripts
Use "prototyping" folder for prototypes

Commands to execute: "cd flutter_styleguide && flutter run -d chrome --web-experimental-hot-reload"

Use README.MD to understand process of development in flutter styleguide.

** IMPORTANT RULES **
- You must not hardcode colors, you must use colors from styleguide lib.
- You must not develop UI elements in main app - instead you must develop UI elements in styleguide, write tests, and then use the elements in main app.

** WIDGET COMPOSITION RULES **
CRITICAL: Use private widgets instead of methods for UI components.

FORBIDDEN ANTI-PATTERNS:
❌ Widget _buildSomething(BuildContext context, Type params) { return Container(...); }
❌ Widget _buildItem(context, data, colors) - passing theme colors as parameters
❌ Methods that return widgets - Flutter recreates them on every build
❌ Positional parameters in widget constructors

REQUIRED PATTERNS:
✅ class _PrivateWidget extends StatelessWidget with named parameters
✅ Use context.colors within the widget instead of passing colors as parameters
✅ Named parameters: required this.title, required this.onPressed
✅ Private widgets allow Flutter to optimize rebuilds and improve performance

Examples:
✅ class _AgentItem extends StatelessWidget { final String title; const _AgentItem({required this.title}); }
✅ Using widget: _AgentItem(title: agent.title)
❌ Widget _buildAgentItem(BuildContext context, String title, ThemeColorSet colors)
❌ Using method: _buildAgentItem(context, agent.title, colors)

** LIST AND SCROLL OPTIMIZATION RULES **
CRITICAL: Proper ListView usage and performance optimization.

FORBIDDEN ANTI-PATTERNS:
❌ shrinkWrap: true - breaks virtualization and degrades performance
❌ physics: const NeverScrollableScrollPhysics() - makes ListView non-scrollable
❌ final list = [...] - mutable lists recreated on every build
❌ ListView inside Column without Expanded wrapper

REQUIRED PATTERNS:
✅ const List<Type> staticData = [...] - immutable const lists
✅ Expanded(child: ListView.builder()) - proper scrollable lists with virtualization
✅ ListView.builder for dynamic content without shrinkWrap
✅ Separate const data from widget logic

Examples:
✅ const List<Map<String, dynamic>> _sampleData = [...];
✅ Expanded(child: ListView.builder(itemCount: _sampleData.length))
❌ final data = [...]; ListView.builder(shrinkWrap: true, physics: NeverScrollableScrollPhysics())
❌ Column(children: [ListView.builder(...)]) without Expanded

** THEME MANAGEMENT RULES **
CRITICAL: Use centralized theme management through ThemeContext extension.

FORBIDDEN ANTI-PATTERNS:
❌ final colors = isDarkMode ? AppColors.dark : AppColors.light;
❌ final themeProvider = Provider.of<ThemeProvider>(context); final colors = themeProvider.isDarkMode ? AppColors.dark : AppColors.light;
❌ Manual theme selection with Provider.of<ThemeProvider>
❌ Direct AppColors.dark/AppColors.light access in widgets
❌ Passing ThemeColorSet colors as widget parameters

REQUIRED PATTERNS:
✅ final colors = context.colors;
✅ final colors = context.colorsListening; // for reactive updates
✅ final isDarkMode = context.isDarkMode;
✅ Use ThemeContext extension for all theme access
✅ Access theme within widgets, don't pass as parameters

IMPORT: import 'package:dmtools_styleguide/dmtools_styleguide.dart';

Examples:
✅ Container(color: context.colors.cardBg)
✅ Text('Hello', style: TextStyle(color: context.colors.textColor))
✅ if (context.isDarkMode) { /* dark mode logic */ }
❌ Container(color: isDarkMode ? AppColors.dark.cardBg : AppColors.light.cardBg)
❌ Text('Hello', style: TextStyle(color: themeProvider.isDarkMode ? AppColors.dark.textColor : AppColors.light.textColor))
❌ Widget _buildItem(context, data, colors) - don't pass colors as parameter

ARCHITECTURE RULES:
- ThemeContext extension provides automatic fallback to Theme.of(context)
- Use context.colors for non-reactive theme access
- Use context.colorsListening for reactive theme updates
- Never bypass the extension with direct Provider access
- Maintain consistency between main app and styleguide

** RESPONSIVE DESIGN RULES **
CRITICAL: Use centralized responsive components instead of manual MediaQuery checks.

FORBIDDEN: MediaQuery.of(context).size.width comparisons, hardcoded breakpoints, manual LayoutBuilder responsive logic
REQUIRED: ResponsiveBuilder, ResponsiveWidget, ResponsiveUtils, ResponsiveBreakpoints
IMPORT: import 'package:dmtools_styleguide/dmtools_styleguide.dart';

Examples:
✅ ResponsiveUtils.isWideScreen(context)
✅ SimpleResponsiveBuilder(mobile: Mobile(), desktop: Desktop())
✅ ResponsiveWidget(mobile: Widget1(), desktop: Widget2())
❌ MediaQuery.of(context).size.width > 1200
❌ if (constraints.maxWidth > 768)

** TESTING AND QUALITY RULES **
MANDATORY: After any theme or UI changes:
1. Run "flutter analyze" in both main app and flutter_styleguide
2. Fix ALL linter errors and warnings before submitting
3. Run "cd flutter_styleguide && flutter test" for styleguide changes
4. Test theme switching functionality manually
5. Verify responsive behavior on different screen sizes

** IMPORT CLEANUP RULES **
- Remove unused Provider imports after switching to context.colors
- Remove unused ThemeProvider imports where no longer needed
- Keep imports minimal and clean

** DEVELOPMENT WORKFLOW RULES **
- Always run from project root: "flutter run -d chrome --web-experimental-hot-reload"
- Use correct commands: "cd flutter_styleguide && flutter run -d chrome --web-experimental-hot-reload" for styleguide
- Never run Flutter commands from parent directories
- Check current directory before running any Flutter commands

** IMPORTANT RULE **
Run flutter lint tools after changes to be sure that there is no errors and warnings.